package monalisa.addons.reachability;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.xml.stream.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.*;
import java.util.HashMap;
import java.util.Map;
import monalisa.data.pn.Transition;
import java.util.Collection;
import java.util.prefs.Preferences;

/**
 *
 * @author Bo
 */
public class FiringrateFrame extends javax.swing.JFrame {

    private final ReachabilityDialog rd;
    private HashMap<Transition, Double> firingRates;
   
    
    /**
     * Creates new form FiringrateFrame
     */
    public FiringrateFrame(ReachabilityDialog rd, Collection<Transition> transitions) {
        initComponents();
        DefaultTableModel model = (DefaultTableModel) firingrateTable.getModel();
        this.rd = rd;
        this.firingRates = new HashMap<>();

        for (Transition t : transitions) {
            double defaultFiringRate = 0.0;
            model.addRow(new Object[]{
                t,
                defaultFiringRate
            });
            firingRates.put(t, defaultFiringRate);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        firingrateLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        firingrateTable = new javax.swing.JTable();
        importButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        firingrateLabel.setText("Firing rates");

        firingrateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transition", "Firing rate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(firingrateTable);

        importButton.setText("import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        saveButton.setText("save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(importButton)
                        .addGap(206, 206, 206)
                        .addComponent(saveButton))
                    .addComponent(firingrateLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(firingrateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(saveButton))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        Preferences prefs = Preferences.userRoot().node(getClass().getName());
        String lastDir = prefs.get("lastXmlDir", null);  // 读取上次路径
        
        JFileChooser fc = new JFileChooser();
        if (lastDir != null) {
            fc.setCurrentDirectory(new File(lastDir));  // 设置默认目录
        }
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
        File inFile = fc.getSelectedFile();
        prefs.put("lastXmlDir", inFile.getParent());  // 保存新的路径
    
        try {
            XMLInputFactory factory = XMLInputFactory.newInstance();
            XMLStreamReader parser = factory.createXMLStreamReader(new FileInputStream(inFile));
    
            Map<String, Double> nameToRate = new HashMap<>();
    
            while (parser.hasNext()) {
                if (parser.getEventType() == XMLStreamConstants.START_ELEMENT &&
                        "transition".equals(parser.getLocalName())) {
    
                    String name = null;
                    double firingRate = 0;
    
                    for (int i = 0; i < parser.getAttributeCount(); i++) {
                        switch (parser.getAttributeLocalName(i)) {
                            case "name":
                                name = parser.getAttributeValue(i);
                                break;
                            case "firingRate":
                                firingRate = Double.parseDouble(parser.getAttributeValue(i));
                                break;
                        }
                    }
    
                    if (name != null) {
                        nameToRate.put(name, firingRate);
                    }
                }
                parser.next();
            }
    
            parser.close();
    
            // 更新 firingRates 中的值
            for (Transition t : firingRates.keySet()) {
                String name = (String) t.getProperty("name");
                if (nameToRate.containsKey(name)) {
                    firingRates.put(t, nameToRate.get(name));
                }
            }
    
            // 刷新表格内容
            DefaultTableModel model = (DefaultTableModel) firingrateTable.getModel();
            model.setRowCount(0); // 清空表格
            for (Transition t : firingRates.keySet()) {
                double rate = firingRates.getOrDefault(t, 0.0);
                model.addRow(new Object[]{t, rate});
            }

            rd.updateFiringRates(firingRates);
    
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error importing XML: " + ex.getMessage(),
                    "Import Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) firingrateTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Transition t = (Transition) model.getValueAt(i, 0);
            double rate = Double.parseDouble(model.getValueAt(i, 1).toString());
            firingRates.put(t, rate);
        }

        rd.updateFiringRates(firingRates);

        // 示例：打印数据
        // System.out.println("Saved Firing Rates:");
        // for (Map.Entry<Transition, Double> entry : firingRates.entrySet()) {
        //     System.out.println(entry.getKey().getProperty("name") + ": " + entry.getValue());
        // }

        
    
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel firingrateLabel;
    private javax.swing.JTable firingrateTable;
    private javax.swing.JButton importButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
