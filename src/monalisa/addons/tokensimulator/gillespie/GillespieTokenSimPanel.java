/*
 *
 *  This file is part of the software MonaLisa.
 *  MonaLisa is free software, dependent on non-free software. For more information read LICENCE and README.
 *
 *  (c) Department of Molecular Bioinformatics, Institute of Computer Science, Johann Wolfgang
 *  Goethe-University Frankfurt am Main, Germany
 *
 */
package monalisa.addons.tokensimulator.gillespie;

import java.awt.event.KeyEvent;
import monalisa.addons.tokensimulator.TokenSimulator;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

/**
 *
 * @author Pavel Balazki
 */
public class GillespieTokenSimPanel extends javax.swing.JPanel {

    //BEGIN VARIABLES DECLARATION
    private GillespieTokenSim ts;
    private static final Logger LOGGER = LogManager.getLogger(GillespieTokenSimPanel.class);
    //END VARIABLES DECLARATION

    //BEGIN CONSTRUCTORS
    /**
     * Creates new form StochasticTokenSimPanel
     */
    private GillespieTokenSimPanel() {
        initComponents();
    }

    public GillespieTokenSimPanel(GillespieTokenSim tsN) {
        this.ts = tsN;
        initComponents();
    }
    //END CONSTRUCTORS

    /**
     * @return the progressBar
     */
    public javax.swing.JProgressBar getProgressBar() {
        return progressBar;
    }

    public void unlock() {
        fireTransitionsButton.setText(TokenSimulator.strings.get("ATSFireTransitionsB"));
        fireTransitionsButton.setToolTipText(TokenSimulator.strings.get("ATSFireTransitionsBT"));
        bgModeB.setEnabled(true);

        if (!continuousModeCheckBox.isSelected()) {
            stepField.setEnabled(true);
        }
        continuousModeCheckBox.setEnabled(true);
        inputDataButton.setEnabled(true);    }

    public boolean isContinuous() {
        return continuousModeCheckBox.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fireTransitionsButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        simName = new javax.swing.JLabel();
        stepField = new javax.swing.JTextField();
        stepLabel = new javax.swing.JLabel();
        inputDataButton = new javax.swing.JButton();
        continuousModeCheckBox = new javax.swing.JCheckBox();
        bgModeB = new javax.swing.JButton();
        simTimeLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(this.getPreferredSize());
        setLayout(new java.awt.GridBagLayout());

        fireTransitionsButton.setText(TokenSimulator.strings.get("ATSFireTransitionsB"));
        fireTransitionsButton.setToolTipText(TokenSimulator.strings.get("ATSFireTransitionsBT"));
        fireTransitionsButton.setEnabled(false);
        fireTransitionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireTransitionsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(fireTransitionsButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(progressBar, gridBagConstraints);

        simName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        simName.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 0);
        add(simName, gridBagConstraints);

        stepField.setText("1");
        stepField.setToolTipText(TokenSimulator.strings.get("ATSFiringPerStepT"));
        stepField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enterPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(stepField, gridBagConstraints);

        stepLabel.setText(TokenSimulator.strings.get("ATSStepLabel"));
        stepLabel.setToolTipText("Number of steps to perform, if \"Start simulation sequence\" is used.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(stepLabel, gridBagConstraints);

        inputDataButton.setText(TokenSimulator.strings.get("GilTSInputDataFrameTitle"));
        inputDataButton.setToolTipText(TokenSimulator.strings.get("GilTSInputDataT"));
        inputDataButton.setEnabled(false);
        inputDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputDataButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(inputDataButton, gridBagConstraints);

        continuousModeCheckBox.setText(TokenSimulator.strings.get("ATSContinuousModeCheckBox"));
        continuousModeCheckBox.setToolTipText(TokenSimulator.strings.get("ATSContinuousModeCheckBoxT"));
        continuousModeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuousModeCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(continuousModeCheckBox, gridBagConstraints);

        bgModeB.setText(TokenSimulator.strings.get("GilTSBGModeButton"));
        bgModeB.setToolTipText(TokenSimulator.strings.get("GilTSBGModeTT"));
        bgModeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgModeBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(bgModeB, gridBagConstraints);

        simTimeLabel.setText("Simulated time: 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(simTimeLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void fireTransitionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireTransitionsButtonActionPerformed
        //if no firing takes place, start new sequence of firing
        if (this.fireTransitionsButton.getText().equals(TokenSimulator.strings.get("ATSFireTransitionsB"))) {
            //at this point, user can no more enable or disable the continuous mode
            this.continuousModeCheckBox.setEnabled(false);
            //switch button mode from "fire transitions" to "stop firing"
            this.fireTransitionsButton.setText(TokenSimulator.strings.get("ATSStopFiringB"));
            this.fireTransitionsButton.setToolTipText(TokenSimulator.strings.get("ATSStopFiringBT"));
            LOGGER.info("Firebutton has been pressed and firing starts");
            this.ts.startFiring();
        } //if a firing sequence is being executed, stop it
        else if (this.fireTransitionsButton.getText().equals(TokenSimulator.strings.get("ATSStopFiringB"))) {
            LOGGER.info("Firebutton has been pressed and firing stopped");
            this.ts.stopFiring();
        }
    }//GEN-LAST:event_fireTransitionsButtonActionPerformed

    private void continuousModeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuousModeCheckBoxActionPerformed
        if (this.continuousModeCheckBox.isSelected()) {
            this.stepField.setEnabled(false);
        } else {
            this.stepField.setEnabled(true);
        }
    }//GEN-LAST:event_continuousModeCheckBoxActionPerformed

    private void inputDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputDataButtonActionPerformed
        this.ts.setInputData();
    }//GEN-LAST:event_inputDataButtonActionPerformed

    private void bgModeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgModeBActionPerformed
        this.ts.fastSimFrame.addFastSim(new StochasticSimulator(this.ts, this.ts.deterministicReactionConstants, this.ts.getTokenSim().getMarking(), this.ts.volume, this.ts.getRandom()));
    }//GEN-LAST:event_bgModeBActionPerformed

    private void enterPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enterPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //at this point, user can not enable or disable the continuous mode no more
            this.continuousModeCheckBox.setEnabled(false);
            //switch button mode from "fire transitions" to "stop firing"
            this.fireTransitionsButton.setText(TokenSimulator.strings.get("ATSStopFiringB"));
            this.fireTransitionsButton.setToolTipText(TokenSimulator.strings.get("ATSStopFiringBT"));
            this.ts.startFiring();
        }
    }//GEN-LAST:event_enterPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton bgModeB;
    protected javax.swing.JCheckBox continuousModeCheckBox;
    protected javax.swing.JButton fireTransitionsButton;
    protected javax.swing.JButton inputDataButton;
    protected javax.swing.JProgressBar progressBar;
    protected javax.swing.JLabel simName;
    protected javax.swing.JLabel simTimeLabel;
    protected javax.swing.JTextField stepField;
    private javax.swing.JLabel stepLabel;
    // End of variables declaration//GEN-END:variables

}
