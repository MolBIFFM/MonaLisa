/*
 *
 *  This file is part of the software MonaLisa.
 *  MonaLisa is free software, dependent on non-free software. For more information read LICENCE and README.
 *
 *  (c) Department of Molecular Bioinformatics, Institute of Computer Science, Johann Wolfgang
 *  Goethe-University Frankfurt am Main, Germany
 *
 */
package monalisa.addons.tokensimulator.gillespie;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashSet;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.table.AbstractTableModel;
import monalisa.addons.tokensimulator.AbstractTokenSimPanel;
import monalisa.addons.tokensimulator.SimulationManager;
import monalisa.addons.tokensimulator.SimulationPanel;
import monalisa.addons.tokensimulator.listeners.SimulationEvent;
import monalisa.addons.tokensimulator.listeners.SimulationListener;
import monalisa.data.pn.Transition;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

/**
 *
 * @author Pavel Balazki
 */
public class GillespieTokenSimPanel extends AbstractTokenSimPanel implements SimulationListener {

    //BEGIN VARIABLES DECLARATION
    private GillespieTokenSim gillTS;
    private static final Logger LOGGER = LogManager.getLogger(GillespieTokenSimPanel.class);
    //END VARIABLES DECLARATION
    private SimulationPanel owner;
    /**
     * Frame that groups all instances of FastSimulationMode.
     */
    protected FastSimulationModes fastSimFrame;

    //BEGIN CONSTRUCTORS
    /**
     * Creates new form StochasticTokenSimPanel
     */
    private GillespieTokenSimPanel() {
        initComponents();
    }

    public GillespieTokenSimPanel(GillespieTokenSim tsN, SimulationPanel owner) {
        this.owner = owner;
        this.gillTS = tsN;
        this.fastSimFrame = new FastSimulationModes(gillTS, this);
        initComponents();
    }
    //END CONSTRUCTORS

    /**
     * @return the progressBar
     */
    public javax.swing.JProgressBar getProgressBar() {
        return progressBar;
    }

    public void unlock() {
        fireTransitionsButton.setText(SimulationManager.strings.get("ATSFireTransitionsB"));
        fireTransitionsButton.setToolTipText(SimulationManager.strings.get("ATSFireTransitionsBT"));
        bgModeB.setEnabled(true);

        if (!continuousModeCheckBox.isSelected()) {
            stepField.setEnabled(true);
        }
        continuousModeCheckBox.setEnabled(true);
        inputDataButton.setEnabled(true);
    }

    public boolean isContinuous() {
        return continuousModeCheckBox.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fireTransitionsButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        simName = new javax.swing.JLabel();
        stepField = new javax.swing.JTextField();
        stepLabel = new javax.swing.JLabel();
        inputDataButton = new javax.swing.JButton();
        continuousModeCheckBox = new javax.swing.JCheckBox();
        bgModeB = new javax.swing.JButton();
        simTimeLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(this.getPreferredSize());
        setLayout(new java.awt.GridBagLayout());

        fireTransitionsButton.setText(SimulationManager.strings.get("ATSFireTransitionsB"));
        fireTransitionsButton.setToolTipText(SimulationManager.strings.get("ATSFireTransitionsBT"));
        fireTransitionsButton.setEnabled(false);
        fireTransitionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireTransitionsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(fireTransitionsButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(progressBar, gridBagConstraints);

        simName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        simName.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 0);
        add(simName, gridBagConstraints);

        stepField.setText("1");
        stepField.setToolTipText(SimulationManager.strings.get("ATSFiringPerStepT"));
        stepField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enterPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(stepField, gridBagConstraints);

        stepLabel.setText(SimulationManager.strings.get("ATSStepLabel"));
        stepLabel.setToolTipText("Number of steps to perform, if \"Start simulation sequence\" is used.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(stepLabel, gridBagConstraints);

        inputDataButton.setText(SimulationManager.strings.get("GilTSInputDataFrameTitle"));
        inputDataButton.setToolTipText(SimulationManager.strings.get("GilTSInputDataT"));
        inputDataButton.setEnabled(false);
        inputDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputDataButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(inputDataButton, gridBagConstraints);

        continuousModeCheckBox.setText(SimulationManager.strings.get("ATSContinuousModeCheckBox"));
        continuousModeCheckBox.setToolTipText(SimulationManager.strings.get("ATSContinuousModeCheckBoxT"));
        continuousModeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuousModeCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(continuousModeCheckBox, gridBagConstraints);

        bgModeB.setText(SimulationManager.strings.get("GilTSBGModeButton"));
        bgModeB.setToolTipText(SimulationManager.strings.get("GilTSBGModeTT"));
        bgModeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgModeBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(bgModeB, gridBagConstraints);

        simTimeLabel.setText("Simulated time: 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(simTimeLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void fireTransitionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireTransitionsButtonActionPerformed
        //if no firing takes place, start new sequence of firing
        if (this.fireTransitionsButton.getText().equals(SimulationManager.strings.get("ATSFireTransitionsB"))) {
            //at this point, user can no more enable or disable the continuous mode
            this.continuousModeCheckBox.setEnabled(false);
            //switch button mode from "fire transitions" to "stop firing"
            this.fireTransitionsButton.setText(SimulationManager.strings.get("ATSStopFiringB"));
            this.fireTransitionsButton.setToolTipText(SimulationManager.strings.get("ATSStopFiringBT"));
            LOGGER.info("Firebutton has been pressed and firing starts");
            startFiring();
        } //if a firing sequence is being executed, stop it
        else if (this.fireTransitionsButton.getText().equals(SimulationManager.strings.get("ATSStopFiringB"))) {
            LOGGER.info("Firebutton has been pressed and firing stopped");
            stopFiring();
        }
    }//GEN-LAST:event_fireTransitionsButtonActionPerformed

    private void continuousModeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuousModeCheckBoxActionPerformed
        if (this.continuousModeCheckBox.isSelected()) {
            this.stepField.setEnabled(false);
        } else {
            this.stepField.setEnabled(true);
        }
    }//GEN-LAST:event_continuousModeCheckBoxActionPerformed

    private void inputDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputDataButtonActionPerformed
        setInputData();
    }//GEN-LAST:event_inputDataButtonActionPerformed

    private void bgModeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgModeBActionPerformed
        this.fastSimFrame.addFastSim(new StochasticSimulator(this.gillTS, this.gillTS.deterministicReactionConstants, this.gillTS.getSimulationMan().getMarking(), this.gillTS.volume, this.gillTS.getRandom(), fastSimFrame));
    }//GEN-LAST:event_bgModeBActionPerformed

    private void enterPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enterPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //at this point, user can not enable or disable the continuous mode no more
            this.continuousModeCheckBox.setEnabled(false);
            //switch button mode from "fire transitions" to "stop firing"
            this.fireTransitionsButton.setText(SimulationManager.strings.get("ATSStopFiringB"));
            this.fireTransitionsButton.setToolTipText(SimulationManager.strings.get("ATSStopFiringBT"));
            this.startFiring();
        }
    }//GEN-LAST:event_enterPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton bgModeB;
    protected javax.swing.JCheckBox continuousModeCheckBox;
    protected javax.swing.JButton fireTransitionsButton;
    protected javax.swing.JButton inputDataButton;
    protected javax.swing.JProgressBar progressBar;
    protected javax.swing.JLabel simName;
    protected javax.swing.JLabel simTimeLabel;
    protected javax.swing.JTextField stepField;
    private javax.swing.JLabel stepLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setSimName(String name) {
        simName.setText(name);
    }

    @Override
    public void startSim() {
        this.fastSimFrame.setFastModes(new HashSet<>());
        this.stepField.setEnabled(true);
        this.fireTransitionsButton.setEnabled(true);
        this.bgModeB.setEnabled(true);
        this.inputDataButton.setEnabled(true);
        LOGGER.info("Gillespie simulation started");
        gillTS.computeActiveTransitions();
    }

    @Override
    public void endSim() {
        if (gillTS.getSimSwingWorker() != null) {
            gillTS.getSimSwingWorker().cancel(true);
        }
        //Try to stop running fast modes.
        for (StochasticSimulator sim : fastSimFrame.getFastModes()) {
            this.fastSimFrame.removeFastSim(sim);
        }

        stepField.setEnabled(false);
        fireTransitionsButton.setEnabled(false);
        bgModeB.setEnabled(false);
        continuousModeCheckBox.setEnabled(false);
        inputDataButton.setEnabled(false);
        owner.disableSetup();
        LOGGER.info("Gillespie simulation stopped");
        gillTS.getSimulationMan().lockGUI(true);
    }

    /**
     * Start firing sequence.
     */
    protected void startFiring() {
        //lock GUI, so the user cannot interrupt the firing sequence by alterating the settings.
        LOGGER.info("Firing in the gillespie simulation started");
        stepField.setEnabled(false);
        continuousModeCheckBox.setEnabled(false);
        inputDataButton.setEnabled(false);
        bgModeB.setEnabled(false);
        //tells the token simulator to lock the GUI, too.
        gillTS.getSimulationMan().lockGUI(true);

        //try to parse number of steps to perform from stepField. If no integer is entered, create a warning popup and do nothing
        LOGGER.debug("Parsing the number of steps to perfrom out of the textfield");
        int steps = 0;
        try {
            //number of steps that will be performed
            steps = Integer.parseInt(stepField.getText());
           
        } catch (NumberFormatException nfe) {
            LOGGER.error("NumberFormatException while trying to parse an integer out of the texfield for the amount of steps that should be calculated, therefore stopping the firing", nfe);
            stopFiring();
            JOptionPane.showMessageDialog(null, SimulationManager.strings.get("TSNumberFormatExceptionM"));            
        } finally {
            if (steps < 1) {
                steps = 1;
                stepField.setText("1");
            }
            /*
            Calculate number of distinct combinations for all transitions.
             */
            gillTS.computeDistCombinations();
            //Create new thread that will perform all firing steps.
            gillTS.setSimSwingWorker(new GillespieSimulationSwingWorker(gillTS.getSimulationMan(), gillTS, isContinuous(), steps));
            gillTS.getSimSwingWorker().addSimulationListener(this);
            gillTS.getSimSwingWorker().execute();            
        }
    }

    /**
     * Stop actual firing sequence.
     */
    @Override
    protected void stopFiring() {
        if (gillTS.getSimSwingWorker() != null) {
            gillTS.getSimSwingWorker().stopSequence();
        }
    }

    @Override // REWORK NEEDED HERE
    public void simulationUpdated(SimulationEvent e) {
        String type = e.getType();
        switch (type) {
            case SimulationEvent.INIT:
                getProgressBar().setMaximum((int) e.getValue());
                break;
            case SimulationEvent.UPDATE_PROGRESS:
                getProgressBar().setValue(getProgressBar().getMaximum() - ((int) e.getValue()));
                break;
            case SimulationEvent.UPDATE_VISUAL:
                gillTS.getSimulationMan().updateVisualOutput();
                break;
            case SimulationEvent.DONE:
                getProgressBar().setMaximum(0);
                getProgressBar().setValue(0);
                //unlock GUI
                unlock();
                simTimeLabel.setText("Simulated time: " + gillTS.getSimulatedTime());
                break;
            case SimulationEvent.STOPPED:
                gillTS.getSimulationMan().updateVisualOutput();
                break;
            default:
                break;
        }
    }

    /**
     * Set biological data of the system which will be simulated.
     */
    protected void setInputData() {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                LOGGER.debug("Setting the input data in the gillespie simulation");
                JFrame inputDataFrame = new GillespieInputDataFrame(gillTS, owner.getNetViewer());
                owner.getNetViewer().displayMenu(inputDataFrame.getContentPane(), SimulationManager.strings.get("GilTSInputDataFrameTitle"));
            }
        });
    }

    /**
     * Set firing rates for transitions.
     */
    protected void setFiringRates() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                LOGGER.debug("Setting the firing rates for all transitions for the gillespie simulation");
                final String[] columnNames = {SimulationManager.strings.get("StochTSFiringRatesTableTransition"), SimulationManager.strings.get("StochTSFiringRatesTableRate")}; //names of columns of the firingRatesTable
                AbstractTableModel tableModel = new AbstractTableModel() {
                    @Override
                    public boolean isCellEditable(int row, int col) {
                        return col != 0;
                    }

                    @Override
                    public void setValueAt(Object value, int row, int col) {
                        if (col == 1) {
                            try {
                                /*
                                 * Replace "," with "." first.
                                 */
                                double val = Double.parseDouble(value.toString().replaceAll(",", "."));
                                gillTS.getFiringRates().put(((Transition) getValueAt(row, 0)).id(), val);
                            } catch (NumberFormatException ex) {
                            }
                        }
                    }

                    @Override
                    public String getColumnName(int col) {
                        return columnNames[col].toString();
                    }

                    @Override
                    public int getRowCount() {
                        return gillTS.getFiringRates().size();
                    }

                    @Override
                    public int getColumnCount() {
                        return columnNames.length;
                    }

                    @Override
                    public Object getValueAt(int row, int col) {
                        if (col == 0) {
                            return gillTS.getPetriNet().findTransition(gillTS.getFiringRates().keySet().toArray(new Integer[gillTS.getFiringRates().size()])[row]);
                        } else {
                            return gillTS.getFiringRates().values().toArray(new Double[gillTS.getFiringRates().size()])[row];
                        }
                    }
                };
                JTable firingRatesTable = new JTable();
                firingRatesTable.setModel(tableModel);
                firingRatesTable.setFillsViewportHeight(true);
                //Enable sorting of rows.
                firingRatesTable.setAutoCreateRowSorter(true);
                final JFrame firingRatesFrame = new JFrame(SimulationManager.strings.get("StochTSFiringRatesFrame"));
                /*
                 * Make frame disappear when ESC pressed.
                 */
                firingRatesFrame.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "Cancel");
                firingRatesFrame.getRootPane().getActionMap().put("Cancel", new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        owner.getPreferencesJFrame().setEnabled(true); //getPreferencesJFrame().setEnabled(true);
                        firingRatesFrame.dispose();
                    }
                });
                firingRatesFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                firingRatesFrame.setLocationRelativeTo(null);
                firingRatesFrame.setIconImage(SimulationManager.resources.getImage("icon-16.png"));
                firingRatesFrame.getContentPane().add(new JScrollPane(firingRatesTable));
                /*
                 * Add listener which enables the preferences-frame when firing rates frame is closed.
                 */
                firingRatesFrame.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        owner.getPreferencesJFrame().setEnabled(true);
                    }
                });
                firingRatesFrame.pack();
                /*
                 * Disable preferences frame as long as firing rates are edited.
                 */
                owner.getPreferencesJFrame().setEnabled(false);
                firingRatesFrame.setVisible(true);
            }
        });
    }
}
