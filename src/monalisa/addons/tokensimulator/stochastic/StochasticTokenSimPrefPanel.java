/*
 *
 *  This file is part of the software MonaLisa.
 *  MonaLisa is free software, dependent on non-free software. For more information read LICENCE and README.
 *
 *  (c) Department of Molecular Bioinformatics, Institute of Computer Science, Johann Wolfgang
 *  Goethe-University Frankfurt am Main, Germany
 *
 */
package monalisa.addons.tokensimulator.stochastic;

import javax.swing.JOptionPane;
import monalisa.addons.tokensimulator.AbstractTokenSimPrefPanel;
import monalisa.addons.tokensimulator.SimulationManager;
import monalisa.util.HighQualityRandom;

/**
 *
 * @author Pavel Balazki.
 */
public class StochasticTokenSimPrefPanel extends AbstractTokenSimPrefPanel {

    //BEGIN VARIABLES DECLARATION
    private StochasticTokenSim StochTS;
    //END VARIABLES DECLARATION

    //BEGIN CONSTRUCTORS
    /**
     * Creates new form StochasticTokenSimPrefPanel
     */
    private StochasticTokenSimPrefPanel() {
        initComponents();
    }

    public StochasticTokenSimPrefPanel(StochasticTokenSim tsN) {
        this.StochTS = tsN;
        initComponents();
    }
    //END CONSTRUCTORS

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        updateIntervalFormattedTextField = new javax.swing.JFormattedTextField();
        updateIntervalLabel = new javax.swing.JLabel();
        setSeedButton = new javax.swing.JButton();
        timeDelayJLabel = new javax.swing.JLabel();
        timeDelayJFormattedTextField = new javax.swing.JFormattedTextField();
        qEnablingCheckBox = new javax.swing.JCheckBox();

        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(this.getPreferredSize());
        setLayout(new java.awt.GridBagLayout());

        updateIntervalFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        updateIntervalFormattedTextField.setText("1");
        updateIntervalFormattedTextField.setToolTipText(SimulationManager.strings.get("ATSUpdateIntervalT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(updateIntervalFormattedTextField, gridBagConstraints);

        updateIntervalLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        updateIntervalLabel.setText(SimulationManager.strings.get("ATSUpdateIntervalLabel"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(updateIntervalLabel, gridBagConstraints);

        setSeedButton.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        setSeedButton.setText(SimulationManager.strings.get("STSSetSeedB"));
        setSeedButton.setToolTipText(SimulationManager.strings.get("STSSetSeedBT"));
        setSeedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSeedButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(setSeedButton, gridBagConstraints);

        timeDelayJLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        timeDelayJLabel.setText(SimulationManager.strings.get("ATSTimeDelayLabel"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        add(timeDelayJLabel, gridBagConstraints);

        timeDelayJFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        timeDelayJFormattedTextField.setText("0");
        timeDelayJFormattedTextField.setToolTipText(SimulationManager.strings.get("ATSTimeDelayT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        add(timeDelayJFormattedTextField, gridBagConstraints);

        qEnablingCheckBox.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        qEnablingCheckBox.setText(SimulationManager.strings.get("StochTSMarkingDependentFiringRate"));
        qEnablingCheckBox.setToolTipText(SimulationManager.strings.get("StochTSMarkingDependentFiringRateT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(qEnablingCheckBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void setSeedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSeedButtonActionPerformed
        try {
            long seed = new Long(JOptionPane.showInputDialog(SimulationManager.strings.get("STSSetSeedBT"), this.StochTS.getRandom().getSeed()));
            this.StochTS.setRandom(new HighQualityRandom(seed));
        } catch (NumberFormatException E) {
            JOptionPane.showMessageDialog(null, "The seed must be a 48-bit long (Integer)");
        }
    }//GEN-LAST:event_setSeedButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JCheckBox qEnablingCheckBox;
    protected javax.swing.JButton setSeedButton;
    protected javax.swing.JFormattedTextField timeDelayJFormattedTextField;
    private javax.swing.JLabel timeDelayJLabel;
    protected javax.swing.JFormattedTextField updateIntervalFormattedTextField;
    private javax.swing.JLabel updateIntervalLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void updatePreferences() {
        /*
         * Update time delay.
         */
        int timeDelay = Integer.parseInt(timeDelayJFormattedTextField.getText());
        if (timeDelay >= 0) {
            StochTS.getSimulationMan().getPreferences().put("Time delay", timeDelay);
        }
        /*
         * Update update interval
         */
        int updateInterval = Integer.parseInt(updateIntervalFormattedTextField.getText());
        if (updateInterval >= 0) {
            StochTS.getSimulationMan().getPreferences().put("Update interval", updateInterval);
        }
        /*
         * Update marking dependent firing rates check box
         */
        StochTS.getSimulationMan().getPreferences().put("Marking dependent rates", qEnablingCheckBox.isSelected());
    }

    @Override
    public void loadPreferences() {
        timeDelayJFormattedTextField.setText(((Integer) StochTS.getSimulationMan().getPreferences().get("Time delay")).toString());
        updateIntervalFormattedTextField.setText(((Integer) StochTS.getSimulationMan().getPreferences().get("Update interval")).toString());
        qEnablingCheckBox.setSelected((Boolean) StochTS.getSimulationMan().getPreferences().get("Marking dependent rates"));
    }

}
