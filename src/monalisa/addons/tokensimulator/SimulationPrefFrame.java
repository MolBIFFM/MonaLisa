/*
 *
 *  This file ist part of the software MonaLisa.
 *  MonaLisa is free software, dependend on non-free software. For more information read LICENCE and README.
 *
 *  (c) Department of Molecular Bioinformatics, Institute of Computer Science, Johann Wolfgang
 *  Goethe-University Frankfurt am Main, Germany
 *
 */
package monalisa.addons.tokensimulator;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.AbstractAction;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.KeyStroke;
import monalisa.data.pn.Place;
import monalisa.util.MonaLisaFileChooser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Pavel Balazki.
 */
public class SimulationPrefFrame extends javax.swing.JFrame {

    //BEGIN VARIABLES DECLARATION
    private SimulationManager simulationMan;
    /**
     * Maps a place of PN to the checkbox which represents whether the number of
     * tokens on this place should be plotted.
     */
    Map<Place, JCheckBox> placesToPlot = new HashMap<>();
    //END VARIABLES DECLARATION
    private AbstractTokenSimPrefPanel tsPrefs;
    private static final Logger LOGGER = LogManager.getLogger(SimulationPrefFrame.class);
    private SimulationPanel owner;

    //BEGIN CONSTRUCTORS
    private SimulationPrefFrame() {
    }
    //END CONSTRUCTORS

    /**
     * Creates new form TokenSimPreferencesJFrame
     *
     * @param tsN
     */
    public SimulationPrefFrame(SimulationManager tsN, AbstractTokenSimPrefPanel tsPrefs, SimulationPanel owner) {
        LOGGER.info("Initializing new PrefFrame for " + tsPrefs.getName());
        this.simulationMan = tsN;
        this.tsPrefs = tsPrefs;
        this.owner = owner;
        initComponents();

        /*
         * Make frame disappear when ESC pressed and save settings when ENTER pressed.
         */
        this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "Cancel");
        this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Save");
        this.getRootPane().getActionMap().put("Save", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                okJButton.doClick();
            }
        });
        this.getRootPane().getActionMap().put("Cancel", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cancelJButton.doClick();
            }
        });

        for (Place p : simulationMan.getPetriNet().places()) {
            JCheckBox cb = new JCheckBox((String) p.getProperty("name"), true);
            this.placesToPlot.put(p, cb);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        logJPanel = new javax.swing.JPanel();
        createLogJCheckBox = new javax.swing.JCheckBox();
        logPathJTextField = new javax.swing.JTextField();
        logPathBrowseJButton = new javax.swing.JButton();
        okJButton = new javax.swing.JButton();
        cancelJButton = new javax.swing.JButton();
        customSimulatorJScrollPane = new javax.swing.JScrollPane();
        snapshotsCB = new javax.swing.JCheckBox();
        chartPlottingCB = new javax.swing.JCheckBox();
        placesToPlotB = new javax.swing.JButton();

        setTitle(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFtitle"));
        setIconImage(monalisa.addons.tokensimulator.SimulationManager.resources.getImage("icon-16.png"));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 300));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        logJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10))); // NOI18N
        logJPanel.setPreferredSize(new java.awt.Dimension(300, 68));
        logJPanel.setLayout(new java.awt.GridBagLayout());

        createLogJCheckBox.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        createLogJCheckBox.setSelected(true);
        createLogJCheckBox.setText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFcreateLogJCheckBox"));
        createLogJCheckBox.setToolTipText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFcreateLogJCheckBoxT"));
        createLogJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createLogJCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        logJPanel.add(createLogJCheckBox, gridBagConstraints);

        logPathJTextField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        logPathJTextField.setToolTipText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFlogPathJTextFieldT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 259;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        logJPanel.add(logPathJTextField, gridBagConstraints);

        logPathBrowseJButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        logPathBrowseJButton.setText(monalisa.addons.tokensimulator.SimulationManager.strings.get("Browse"));
        logPathBrowseJButton.setToolTipText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFlogPathBrowseJButtonT"));
        logPathBrowseJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logPathBrowseJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        logJPanel.add(logPathBrowseJButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel1.add(logJPanel, gridBagConstraints);

        okJButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        okJButton.setText("OK");
        okJButton.setToolTipText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFokJButtonT"));
        okJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(okJButton, gridBagConstraints);

        cancelJButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cancelJButton.setText(monalisa.addons.tokensimulator.SimulationManager.strings.get("Cancel"));
        cancelJButton.setToolTipText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFcancelJButtonT"));
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(cancelJButton, gridBagConstraints);

        customSimulatorJScrollPane.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(customSimulatorJScrollPane, gridBagConstraints);

        snapshotsCB.setSelected(true);
        snapshotsCB.setText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSSnapshotsCB"));
        snapshotsCB.setToolTipText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSSnapshotsTT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(snapshotsCB, gridBagConstraints);

        chartPlottingCB.setSelected(true);
        chartPlottingCB.setText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFEnablePlottingCB"));
        chartPlottingCB.setToolTipText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFEnablePlottingTT"));
        chartPlottingCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartPlottingCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(chartPlottingCB, gridBagConstraints);

        placesToPlotB.setText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFPlacesToPlotB"));
        placesToPlotB.setToolTipText(monalisa.addons.tokensimulator.SimulationManager.strings.get("TSPREFPlacesToPlotTT"));
        placesToPlotB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placesToPlotBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(placesToPlotB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 330;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logPathBrowseJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logPathBrowseJButtonActionPerformed
        MonaLisaFileChooser fileChooser = new MonaLisaFileChooser(System.getProperty("user.home") + "/MonaLisa_Simulation_log");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showDialog(this, SimulationManager.strings.get("TSPREFchooseDirectory"));
        if (returnVal == JFileChooser.APPROVE_OPTION)
            this.logPathJTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_logPathBrowseJButtonActionPerformed

    /**
     * If checked, allow to choose log-file path.
     *
     * @param evt
     */
    private void createLogJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createLogJCheckBoxActionPerformed
        if (this.createLogJCheckBox.isSelected()) {
            this.logPathJTextField.setEnabled(true);
            this.logPathBrowseJButton.setEnabled(true);
        } else {
            this.logPathJTextField.setEnabled(false);
            this.logPathBrowseJButton.setEnabled(false);
        }
    }//GEN-LAST:event_createLogJCheckBoxActionPerformed

    /**
     * Hide the frame without saving any changes
     *
     * @param evt
     */
    private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelJButtonActionPerformed
        owner.getNetViewer().hideMenu();
    }//GEN-LAST:event_cancelJButtonActionPerformed
    /**
     * Accept all changes and write them to the preferences-map
     *
     * @param evt
     */
    private void okJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okJButtonActionPerformed
        this.simulationMan.getPreferences().put("LogEnabled", this.createLogJCheckBox.isSelected());
        this.simulationMan.getPreferences().put("LogPath", this.logPathJTextField.getText());
        this.simulationMan.getPreferences().put("SaveSnapshots", this.snapshotsCB.isSelected());
        this.simulationMan.getPreferences().put("EnablePlotting", this.chartPlottingCB.isSelected());
        Map<Place, Boolean> plotPlaces = new HashMap<>();
        for (Entry<Place, JCheckBox> entr : placesToPlot.entrySet()) {
            plotPlaces.put(entr.getKey(), entr.getValue().isSelected());
        }
        this.simulationMan.getPreferences().put("PlacesToPlot", plotPlaces);
        this.tsPrefs.updatePreferences();
        this.owner.getNetViewer().hideMenu();
    }//GEN-LAST:event_okJButtonActionPerformed

    private void chartPlottingCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chartPlottingCBActionPerformed
        owner.showPlotButton.setEnabled(chartPlottingCB.isSelected());
    }//GEN-LAST:event_chartPlottingCBActionPerformed

    private void placesToPlotBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placesToPlotBActionPerformed
        final JFrame frame = new JFrame("Select the places to plot");
        frame.setLayout(new FlowLayout());
        for (Entry<Place, JCheckBox> entr : this.placesToPlot.entrySet()) {
            frame.add(entr.getValue());
        }
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "Close");
        frame.getRootPane().getActionMap().put("Close", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.setVisible(false);
            }
        });
        frame.setMinimumSize(new Dimension(300, 500));
        frame.setIconImage(SimulationManager.resources.getImage("icon-16.png"));
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_placesToPlotBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulationPrefFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton cancelJButton;
    private javax.swing.JCheckBox chartPlottingCB;
    protected javax.swing.JCheckBox createLogJCheckBox;
    protected javax.swing.JScrollPane customSimulatorJScrollPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel logJPanel;
    protected javax.swing.JButton logPathBrowseJButton;
    protected javax.swing.JTextField logPathJTextField;
    protected javax.swing.JButton okJButton;
    private javax.swing.JButton placesToPlotB;
    private javax.swing.JCheckBox snapshotsCB;
    // End of variables declaration//GEN-END:variables
}
