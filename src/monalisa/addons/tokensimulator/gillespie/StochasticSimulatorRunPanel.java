/*
 *
 *  This file is part of the software MonaLisa.
 *  MonaLisa is free software, dependent on non-free software. For more information read LICENCE and README.
 *
 *  (c) Department of Molecular Bioinformatics, Institute of Computer Science, Johann Wolfgang
 *  Goethe-University Frankfurt am Main, Germany
 *
 */
package monalisa.addons.tokensimulator.gillespie;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.AbstractAction;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import monalisa.addons.tokensimulator.SimulationManager;
import monalisa.addons.tokensimulator.listeners.SimulationEvent;
import monalisa.addons.tokensimulator.listeners.SimulationListener;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author Pavel Balazki.
 */
public class StochasticSimulatorRunPanel extends javax.swing.JPanel implements SimulationListener {

    private final ExactSSA sim;
    private final Map<Integer, JCheckBox> nonConstantPlacesToPlot = new HashMap<>();
    private final Map<Integer, JCheckBox> constantPlacesToPlot = new HashMap<>();
    private static final Logger LOGGER = LogManager.getLogger(StochasticSimulatorRunPanel.class);
    /*
     * TextArea with the output information. Displays the number of simulated steps and simulated time.
     */
    protected final JTextArea outTextArea = new JTextArea();

    /**
     * Creates new form StochasticSimulatorRunPanel
     */
    private StochasticSimulatorRunPanel() {
        sim = null;
        initComponents();
    }

    public StochasticSimulatorRunPanel(ExactSSA simN, String[] nonConstantPlacesNames, String[] constantPlacesNames) {
        LOGGER.info("Creating a new Panel for the stochastic simulator");
        initComponents();
        this.sim = simN;
        this.textScrollPane.setViewportView(outTextArea);
        outTextArea.setEditable(false);
        outTextArea.setText(SimulationManager.strings.get("SimStartedAt").concat(sim.dateFormat.format(Calendar.getInstance().getTime())));
        textScrollPane.setPreferredSize(new Dimension(400, 300));
        LOGGER.debug("Filling the stochastic simulator panel with data");
        for (int idx = 0; idx < nonConstantPlacesNames.length; idx++) {
            String name = nonConstantPlacesNames[idx];
            JCheckBox cb = new JCheckBox(name, true);
            nonConstantPlacesToPlot.put(idx, cb);
        }
        for (int idx = 0; idx < constantPlacesNames.length; idx++) {
            String name = constantPlacesNames[idx];
            JCheckBox cb = new JCheckBox(name, true);
            constantPlacesToPlot.put(idx, cb);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exportMarkingButton = new javax.swing.JButton();
        textScrollPane = new javax.swing.JScrollPane();
        placesToPlotB = new javax.swing.JButton();
        showPlotButton = new javax.swing.JButton();

        exportMarkingButton.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        exportMarkingButton.setText(SimulationManager.strings.get("ExportPNMarking"));
        exportMarkingButton.setToolTipText(SimulationManager.strings.get("ExportPNMarkingTT"));
        exportMarkingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMarkingButtonActionPerformed(evt);
            }
        });

        placesToPlotB.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        placesToPlotB.setText(SimulationManager.strings.get("TSPREFPlacesToPlotB"));
        placesToPlotB.setToolTipText(SimulationManager.strings.get("TSPREFPlacesToPlotTT"));
        placesToPlotB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placesToPlotBActionPerformed(evt);
            }
        });

        showPlotButton.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        showPlotButton.setText(SimulationManager.strings.get("TSShowPlotB"));
        showPlotButton.setToolTipText(SimulationManager.strings.get("TSShowPlotTT"));
        showPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPlotButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportMarkingButton)
                    .addComponent(placesToPlotB)
                    .addComponent(showPlotButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(exportMarkingButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(placesToPlotB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPlotButton)
                .addGap(0, 207, Short.MAX_VALUE))
            .addComponent(textScrollPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportMarkingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMarkingButtonActionPerformed
        sim.exportMarking();
    }//GEN-LAST:event_exportMarkingButtonActionPerformed

    private void placesToPlotBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placesToPlotBActionPerformed
        final JFrame frame = new JFrame("Select the places to plot");
        frame.setLayout(new FlowLayout());
        for (Entry<Integer, JCheckBox> entr : this.nonConstantPlacesToPlot.entrySet()) {
            frame.add(entr.getValue());
        }
        for (Entry<Integer, JCheckBox> entr : this.constantPlacesToPlot.entrySet()) {
            frame.add(entr.getValue());
        }
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "Close");
        frame.getRootPane().getActionMap().put("Close", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.setVisible(false);
            }
        });
        frame.setMinimumSize(new Dimension(300, 500));
        frame.setIconImage(SimulationManager.resources.getImage("icon-16.png"));
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_placesToPlotBActionPerformed

    private void showPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPlotButtonActionPerformed
        ArrayList<Integer> nonConstantList = new ArrayList<>();
        for (Entry<Integer, JCheckBox> entr : nonConstantPlacesToPlot.entrySet()) {
            if (entr.getValue().isSelected()) {
                nonConstantList.add(entr.getKey());
            }
        }
        ArrayList<Integer> constantList = new ArrayList<>();
        for (Entry<Integer, JCheckBox> entr : constantPlacesToPlot.entrySet()) {
            if (entr.getValue().isSelected()) {
                constantList.add(entr.getKey());
            }
        }
        showPlot(nonConstantList, constantList);
    }//GEN-LAST:event_showPlotButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportMarkingButton;
    private javax.swing.JButton placesToPlotB;
    protected javax.swing.JButton showPlotButton;
    private javax.swing.JScrollPane textScrollPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates a window with results of selected places plotted with JFreeChart.
     * Results are read from the output file.
     *
     * @param nonConstantPlaces List of indexes of non-constant places.
     * @param constantPlaces List of indexes of constant places.
     */
    public void showPlot(List<Integer> nonConstantPlaces, List<Integer> constantPlaces) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //CHECK FOR THE SIZE OF THE OUTPUT FILE AND SHOW A WARNING
                //IF IT IS TOO BIG (> 5 MB)
                LOGGER.info("Creating a plot out of the current stochastic simulation data");
                int proceed = JOptionPane.OK_OPTION;
                if (sim.getOutputFileRun().length() > 1024 * 1024 * 5) {
                    proceed = JOptionPane.showConfirmDialog(null, "The number of timepoints is too large. This could result in long plotting time and even make the program unresponsive." + " Are you sure you want to continue? (Hint: You can limit the number of timepoints by increasing the update interval.)", "Warning!", JOptionPane.OK_CANCEL_OPTION);
                }
                try {
                    if (proceed == JOptionPane.OK_OPTION) {
                        XYSeriesCollection chartDataset = sim.prepDataset(nonConstantPlaces, constantPlaces);

                        /*
                        Generate graph.
                         */
                        LOGGER.debug("Generating the graph for the stochastic simulation data");
                        final JFreeChart chart = ChartFactory.createScatterPlot("Simulation results", "Passed time [sec]", "Nr. of molecules", chartDataset, PlotOrientation.VERTICAL, true, false, false);
                        ChartFrame frame = new ChartFrame("Simulation results", chart);
                        frame.setSize(800, 600);
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        //                chartFrame.getContentPane().add(cp);
                        frame.setVisible(true);
                    }
                } catch (IOException ex) {
                    LOGGER.error("IOException while trying to create a graph out of the stochastic simulation data", ex);
                }
            }
        });
    }

    @Override
    public void simulationUpdated(SimulationEvent e) {
        String type = e.getType();
        switch (type) {
            case SimulationEvent.INIT:
                showPlotButton.setEnabled(false);
                break;
            case SimulationEvent.DONE:
                showPlotButton.setEnabled(true);
                outTextArea.append((String) e.getValue());
                break;
            case SimulationEvent.UPDATE_PROGRESS:
                outTextArea.append((String) e.getValue());
                break;
            case SimulationEvent.STOPPED:
                outTextArea.append((String) e.getValue());
                break;
            default:
                break;
        }
    }
}
