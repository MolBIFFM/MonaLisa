/*
 *
 *  This file is part of the software MonaLisa.
 *  MonaLisa is free software, dependent on non-free software. For more information read LICENCE and README.
 *
 *  (c) Department of Molecular Bioinformatics, Institute of Computer Science, Johann Wolfgang
 *  Goethe-University Frankfurt am Main, Germany
 *
 */

package monalisa.addons.netviewer;

import monalisa.addons.netviewer.listener.MyColorOptionsMouseListener;
import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import monalisa.addons.annotations.CompartmentAnnotationFrame;
import monalisa.data.pn.Compartment;
import monalisa.resources.ResourceManager;
import monalisa.util.MonaLisaWindowListener;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

/**
 *
 * @author jens
 */
public class CompartmentSetupFrame extends javax.swing.JFrame {
    private static final long serialVersionUID = -8281010506920708773L;

    private final static Logger LOGGER = LogManager.getLogger(CompartmentSetupFrame.class);
    private final static String CREATE = "Create";
    private final static String SAVE = "Save";

    private final NetViewer netViewer;
    private Compartment compartmentForEdit;

    private static final ResourceManager resources = ResourceManager.instance();

    /**
     * Creates new, empty form CompartmentSetupFrame
     */
    public CompartmentSetupFrame(NetViewer nv) {
        this.netViewer = nv;
        LOGGER.info("Initializing empty CompartmentSetupFrame");
        initComponents();
        setLocationRelativeTo(netViewer);
        addWindowListener(new MonaLisaWindowListener(this.netViewer));

        cColor.setForeground(Color.BLACK);
        cColor.setBackground(Color.BLACK);

        actionButton.setText(CREATE);
        annotation.setEnabled(false);

        this.size.setText("1.0");
        LOGGER.info("Finished initializing empty CompartmentSetupFrame");
    }

    /**
     * Creates new form CompartmentSetupFrame with a given Compartment
     */
    public CompartmentSetupFrame(NetViewer nv, Compartment c) {
        this.netViewer = nv;
        this.compartmentForEdit = c;
        LOGGER.info("Initializing CompartmentSetupFrame with given compartment");
        initComponents();
        setLocationRelativeTo(netViewer);
        addWindowListener(new MonaLisaWindowListener(this.netViewer));

        if(c.hasProperty("color")) {
            cColor.setForeground((Color) c.getProperty("color"));
            cColor.setBackground((Color) c.getProperty("color"));
        } else {
            cColor.setForeground(Color.BLACK);
            cColor.setBackground(Color.BLACK);
        }

        cName.setText(c.getName());

        if(c.hasProperty("spatialDimensions")) {
            setSpatialDimensions((String) c.getProperty("spatialDimensions"));
        }

        if(c.hasProperty("size")) {
            try {
                this.size.setText(((Double) c.getProperty("size")).toString());
            } catch(NullPointerException npe) {
                this.size.setText("1.0");
            }
        }

        if(c.hasProperty("constant")) {
            setConstant((boolean) c.getProperty("constant"));
        }

        actionButton.setText(SAVE);
        annotation.setEnabled(true);
        LOGGER.info("Finished initializing CompartmentSetupFrame with given compartment");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cColor = new javax.swing.JLabel();
        actionButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        spatialDimensionsCb = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        size = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        constantCb = new javax.swing.JComboBox();
        annotation = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Compartment Settings");
        setIconImage(resources.getImage("icon-16.png"));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(300, 150));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 200));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        cName.setMinimumSize(new java.awt.Dimension(100, 19));
        cName.setPreferredSize(new java.awt.Dimension(125, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel1.add(cName, gridBagConstraints);

        jLabel2.setText("Color:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel1.add(jLabel2, gridBagConstraints);

        cColor.setText("jLabel3");
        cColor.setOpaque(true);
        cColor.addMouseListener(new MyColorOptionsMouseListener(cColor));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel1.add(cColor, gridBagConstraints);

        actionButton.setText("Save");
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(actionButton, gridBagConstraints);

        jLabel3.setText("Spatial Dimensions:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel1.add(jLabel3, gridBagConstraints);

        spatialDimensionsCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1D", "2D ", "3D" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel1.add(spatialDimensionsCb, gridBagConstraints);

        jLabel4.setText("Size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel1.add(jLabel4, gridBagConstraints);

        size.setMinimumSize(new java.awt.Dimension(50, 19));
        size.setPreferredSize(new java.awt.Dimension(75, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel1.add(size, gridBagConstraints);

        jLabel5.setText("Constant Size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel1.add(jLabel5, gridBagConstraints);

        constantCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "True", "False" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        jPanel1.add(constantCb, gridBagConstraints);

        annotation.setText("Edit Annotation");
        annotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(annotation, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionButtonActionPerformed
        if(!cName.getText().isEmpty()) {
            Compartment c;
            Double compartmentSize;

            compartmentSize = getCompartmentSize();
            if(compartmentSize == null) {
                return;
            }

            switch (actionButton.getText()) {
                case CREATE:
                    LOGGER.info("Creating new compartment");
                    c = new Compartment(cName.getText());
                    c.putProperty("color", cColor.getBackground());
                    c.putProperty("spatialDimensions", getSpatialDimensions());
                    c.putProperty("size", compartmentSize);
                    c.putProperty("constant", getConstant());
                    this.netViewer.tb.compartmentCb.addItem(c);
                    this.netViewer.getProject().getPetriNet().addCompartment(c);
                    LOGGER.info("Successfully created new compartment");
                    break;
                case SAVE:
                    LOGGER.info("Saving compartment");
                    c = (Compartment) this.netViewer.tb.compartmentCb.getItemAt(((DefaultComboBoxModel) this.netViewer.tb.compartmentCb.getModel()).getIndexOf(this.compartmentForEdit));
                    c.setName(cName.getText());
                    c.putProperty("color", cColor.getBackground());
                    c.putProperty("spatialDimensions", getSpatialDimensions());
                    c.putProperty("size", compartmentSize);
                    c.putProperty("constant", getConstant());
                    this.netViewer.tb.compartmentCb.repaint();
                    LOGGER.info("Successfully saved compartment");
                    break;
            }
            this.dispose();
        }
    }//GEN-LAST:event_actionButtonActionPerformed

    private void annotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationActionPerformed
        CompartmentAnnotationFrame caf = new CompartmentAnnotationFrame(this, this.compartmentForEdit);
        caf.setVisible(true);
    }//GEN-LAST:event_annotationActionPerformed

    private Double getCompartmentSize() {
        Double ret;

        try {
            ret = new Double(this.size.getText());
        } catch (java.lang.NumberFormatException nfe) {
            LOGGER.error("Issue while getting compartment size: ", nfe);
            JOptionPane.showMessageDialog(this, "The size of the compartment must be a number");
            ret = null;
        }

        return ret;
    }

    private void setSpatialDimensions(String sd) {
        switch (sd) {
            case "1D":
                this.spatialDimensionsCb.setSelectedIndex(0);
            case "2D":
                this.spatialDimensionsCb.setSelectedIndex(1);
            case "3D":
                this.spatialDimensionsCb.setSelectedIndex(2);
            default:
                this.spatialDimensionsCb.setSelectedIndex(0);
        }
    }

    private String getSpatialDimensions() {
        switch ((String)this.spatialDimensionsCb.getSelectedItem()) {
            case "1D":
                return "1";
            case "2D":
                return "2";
            case "3D":
                return "3";
            default:
                return "1";
        }
    }

    private boolean getConstant() {
        switch ((String)this.constantCb.getSelectedItem()) {
            case "True":
                return true;
            case "False":
                return false;
            default:
                return true;
        }
    }

    private void setConstant(boolean constant) {
        if(constant) {
            this.constantCb.setSelectedIndex(0);
        }
        else {
            this.constantCb.setSelectedIndex(1);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionButton;
    private javax.swing.JButton annotation;
    private javax.swing.JLabel cColor;
    private javax.swing.JTextField cName;
    private javax.swing.JComboBox constantCb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField size;
    private javax.swing.JComboBox spatialDimensionsCb;
    // End of variables declaration//GEN-END:variables
}
